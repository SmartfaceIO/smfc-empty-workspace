"use strict";

var orientation = _interopRequireWildcard(require("sf-extension-utils/lib/orientation"));

var _system = _interopRequireDefault(require("sf-core/device/system"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function load(src) {
  return require(src);
}

let AndroidConfig;
var isTablet = false;

if (_system.default.OS === "iOS" && orientation.shortEdge >= 720) {
  isTablet = true;
} else if (_system.default.OS === "Android") {
  AndroidConfig = load('sf-core/util/Android/androidconfig');
  const Activity = AndroidConfig.activity;
  const context = Activity;
  const SCREENLAYOUT_SIZE_MASK = 15,
        SCREENLAYOUT_SIZE_LARGE = 3;
  let xlarge = Boolean((context.getResources().getConfiguration().screenLayout & SCREENLAYOUT_SIZE_MASK) === 4);
  let large = Boolean((context.getResources().getConfiguration().screenLayout & SCREENLAYOUT_SIZE_MASK) == SCREENLAYOUT_SIZE_LARGE);
  isTablet = xlarge || large;
}

module.exports = isTablet;