"use strict";

exports.__esModule = true;
exports.extractTreeFromSFComponent = extractTreeFromSFComponent;
exports.default = fromSFComponent;
exports.createActorTreeFromSFComponent = createActorTreeFromSFComponent;

var _hooks = _interopRequireDefault(require("../core/hooks"));

var StyleContext = _interopRequireWildcard(require("../styling/StyleContext"));

var _Stylable = _interopRequireDefault(require("../styling/Stylable"));

var _addChild = _interopRequireDefault(require("./action/addChild"));

var _removeChild = _interopRequireDefault(require("./action/removeChild"));

var _removeChildren = _interopRequireDefault(require("./action/removeChildren"));

var _findClassNames = _interopRequireDefault(require("@smartface/styler/lib/utils/findClassNames"));

var _raiseErrorMaybe = _interopRequireDefault(require("../core/util/raiseErrorMaybe"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addChild(superAddChild, child, name, classNames = "", userProps = null) {
  superAddChild(child);
  name && this.dispatch((0, _addChild.default)(name, child, classNames, userProps));
}

function removeChild(superRemoveChild, child) {
  if (child) {
    superRemoveChild && superRemoveChild(child);
    child.dispatch && child.dispatch((0, _removeChild.default)());
  } else {
    this.getParent && this.getParent() && this.getParent().removeChild(this);
    this.dispatch && this.dispatch((0, _removeChild.default)());
  }
}

function removeChildren(superRemoveAll) {
  superRemoveAll();
  this.dispatch && this.dispatch((0, _removeChildren.default)());
}

function createOriginals(component) {
  !component.__original_addChild && (component.__original_addChild = component.addChild);
  !component.__original_removeChild && (component.__original_removeChild = component.removeChild);
  !component.__original_removeAll && (component.__original_removeAll = component.removeAll);
}

function patchComponent(component, rootName, name) {
  try {
    if (component.layout && component.layout.addChild) {
      createOriginals(component.layout);
      Object.defineProperties(component.layout, {
        addChild: {
          enumerable: true,
          configurable: true,
          value: addChild.bind(component, component.layout.__original_addChild.bind(component.layout))
        },
        removeChild: {
          enumerable: true,
          configurable: true,
          value: removeChild.bind(component, component.layout.__original_removeChild.bind(component.layout))
        },
        removeAll: {
          enumerable: true,
          configurable: true,
          value: removeChildren.bind(component, component.layout.__original_removeAll.bind(component.layout))
        }
      });
    } else if (component.addChild) {
      createOriginals(component);
      Object.defineProperties(component, {
        addChild: {
          enumerable: true,
          configurable: true,
          value: addChild.bind(component, component.__original_addChild.bind(component))
        },
        removeChild: {
          enumerable: true,
          configurable: true,
          value: removeChild.bind(component, component.__original_removeChild.bind(component))
        },
        removeAll: {
          enumerable: true,
          configurable: true,
          value: removeChildren.bind(component, component.__original_removeAll.bind(component))
        }
      });
    } else {
      !component.removeChild && (component.removeChild = removeChild.bind(component));
    }
  } catch (e) {
    e.message = `An Error is occurred when component [${name}] is patched in the [${rootName}]. ${e.message}`;
    (0, _raiseErrorMaybe.default)(e, component.onError);
  }
}

function createTreeItem(component, name, rootName, root) {
  let componentVars;
  var classNames = component.__tree_item === true ? component.classNames : "";

  if (name == rootName + "_statusBar") {
    componentVars = root.constructor && root.constructor.$$styleContext.statusBar || {};
  } else if (name == rootName + "_headerBar") {
    componentVars = root.constructor && root.constructor.$$styleContext.headerBar || {};
  } else {
    componentVars = component.constructor && component.constructor.$$styleContext || {};
  }

  patchComponent(component, rootName, name);
  classNames = componentVars.classNames ? componentVars.classNames + " " + classNames + " #" + name : classNames + " #" + name;
  return {
    component,
    classNames,
    userStyle: componentVars.userProps,
    name,
    __tree_item: true
  }; // }
}

function buildContextTree(component, name, root, rootName, acc) {
  if (acc[name] === undefined) {
    acc[name] = createTreeItem(component, name, rootName, root);
  }

  component.children && Object.keys(component.children).forEach(child => {
    const comp = component.children[child];

    try {
      if (comp.component !== undefined && comp.classNames !== undefined) {
        buildContextTree(comp.component, createName(name, child), root, rootName, acc);
      } else {
        buildContextTree(comp, createName(name, child), root, rootName, acc);
      }
    } catch (e) {
      e.message = "Error when component would be collected: " + child + ". " + e.message;
      (0, _raiseErrorMaybe.default)(e, component.onError);
    }
  });
}

function createName(root, name) {
  return root + "_" + name;
}
/**
 * Extract components tree from a SF Component
 * 
 * @param {Object} component - A sf-core component
 * @param {string} name - component name
 * @param {function} initialClassNameMap - classNames mapping with specified component and children
 * @param {?function} hookList - callback function to capture context's hooks
 * @param {?Object} acc [={}] - Initial Accumulator value
 * 
 * @return {function} - context helper
 */


function extractTreeFromSFComponent(root, rootName, initialClassNameMap, acc = {}) {
  buildContextTree(root, rootName, root, rootName, acc);
  return acc;
}

function fromSFComponent(root, rootName, hooksList = null, collection = {}) {
  const ctree = extractTreeFromSFComponent(root, rootName, null);
  Object.keys(ctree).forEach(name => {
    const item = ctree[name];
    ctree[name] = collection[name] || (0, _Stylable.default)(item);
  });
  return StyleContext.createStyleContext(ctree, (0, _hooks.default)(hooksList), function updateContextTree(contextElements = {}) {
    return fromSFComponent(root, rootName, hooksList, contextElements);
  });
}

function createActorTreeFromSFComponent(component, name, rootName) {
  if (component.addChild || component.layout) {
    const ctree = extractTreeFromSFComponent(component, name, null);
    const _ctree = {};
    Object.keys(ctree).forEach(name => _ctree[createName(rootName, name)] = (0, _Stylable.default)(ctree[name]));
    return _ctree;
  } else {
    return {
      [createName(rootName, name)]: (0, _Stylable.default)(createTreeItem(component, name, rootName, component))
    };
  }
}