{
  "_args": [
    [
      {
        "raw": "@smartface/contx@beta",
        "scope": "@smartface",
        "escapedName": "@smartface%2fcontx",
        "name": "@smartface/contx",
        "rawSpec": "beta",
        "spec": "beta",
        "type": "tag"
      },
      "/home/ubuntu/workspace/smfc-empty-workspace/scripts"
    ]
  ],
  "_from": "@smartface/contx@beta",
  "_id": "@smartface/contx@1.4.0-beta.13",
  "_inCache": true,
  "_location": "/@smartface/contx",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/contx_1.4.0-beta.13_1533212356709_0.6870892257440602"
  },
  "_npmUser": {
    "name": "alnyli07",
    "email": "alitugrulpinar@yandex.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@smartface/contx@beta",
    "scope": "@smartface",
    "escapedName": "@smartface%2fcontx",
    "name": "@smartface/contx",
    "rawSpec": "beta",
    "spec": "beta",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/@smartface/contx/-/contx-1.4.0-beta.13.tgz",
  "_shasum": "cf3b41262d0c922be1792ede91ccb69f7156f042",
  "_shrinkwrap": null,
  "_spec": "@smartface/contx@beta",
  "_where": "/home/ubuntu/workspace/smfc-empty-workspace/scripts",
  "author": {
    "name": "Cenk Cetinkaya"
  },
  "bugs": {
    "url": "https://github.com/smartface/contxjs/issues"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-customizable"
    },
    "cz-customizable": {
      "path": "./node_modules/cz-conventional-changelog",
      "config": "./.cz-config.js"
    }
  },
  "dependencies": {
    "filtrex": "^0.5.4"
  },
  "description": "Context Manager",
  "devDependencies": {
    "@babel/cli": "7.0.0-beta.54",
    "@babel/core": "7.0.0-beta.54",
    "@babel/plugin-proposal-object-rest-spread": "7.0.0-beta.54",
    "@babel/preset-env": "7.0.0-beta.54",
    "@babel/preset-stage-0": "7.0.0-beta.54",
    "@smartface/styler": "^1.3.14",
    "babel-plugin-add-module-exports": "^0.2.1",
    "chai": "^3.5.0",
    "commitizen": "^2.9.6",
    "conventional-changelog-cli": "^1.3.1",
    "cross-env": "^4.0.0",
    "cz-conventional-changelog": "^2.0.0",
    "cz-customizable": "^5.0.0",
    "eslint": "^3.19.0",
    "eslint-plugin-react": "^6.10.3",
    "gitbook-cli": "^2.3.2",
    "jase": "^1.2.0",
    "jsdoc": "^3.5.5",
    "jsdoc-babel": "^0.3.0",
    "jsdoc-to-markdown": "^3.0.2",
    "minimist": "^1.2.0",
    "mocha": "^3.3.0",
    "semver": "^5.3.0"
  },
  "directories": {},
  "dist": {
    "shasum": "cf3b41262d0c922be1792ede91ccb69f7156f042",
    "tarball": "https://registry.npmjs.org/@smartface/contx/-/contx-1.4.0-beta.13.tgz",
    "fileCount": 35,
    "unpackedSize": 308807
  },
  "gitHead": "a9aa26232c7f53c452a3acec243cfde371b54291",
  "homepage": "https://github.com/smartface/contxjs#readme",
  "keywords": [
    "javascript",
    "context management"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "alnyli07",
      "email": "alitugrulpinar@yandex.com"
    },
    {
      "name": "alperozisik",
      "email": "alper.ozisik@yahoo.com"
    },
    {
      "name": "cenkce",
      "email": "mail@cenkcetinkaya.com"
    },
    {
      "name": "npmread-only",
      "email": "npmread-only@smartface.io"
    },
    {
      "name": "osmankibar",
      "email": "osman_kibar@yahoo.com"
    },
    {
      "name": "ozcanovunc",
      "email": "ozcanovunc@outlook.com"
    },
    {
      "name": "smf",
      "email": "info@smartface.io"
    }
  ],
  "name": "@smartface/contx",
  "optionalDependencies": {},
  "readme": "[![Twitter: @Smartface_io](https://img.shields.io/badge/contact-@Smartface_io-blue.svg?style=flat)](https://twitter.com/smartface_io)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/smartface/contxjs/blob/master/LICENSE)\n![npm version](https://img.shields.io/npm/v/@smartface/contx.svg?style=flat)\n\n# Contxjs\n\n## Styling\nYou may want to take a look at styler [documentation](https://github.com/smartface/styler/blob/master/README.md) \nto have a better understanding of how Context works.\n\n## Context Management\nEach context encapsulates some behaviors and applies theme to decorated components \nwhich are came from outside of the context using Context's actors and reducers.\n\n### Contx/Smartface/pageContext\nPageContext creates stylable Smartface pages and components so that we can manipulate \nthem using style-objects and selectors. Smartface UI-Editor Transpiler connects \nPages and PageContext. To add components dynamically in runtime, (For instance \nthere might be images that should be created after an api call) PageContext's \nactions must be used.\n\n#### Contx/Smartface/pageContext API\n##### FlexLayout::children: object\nWhen PageContext is initialized for the first time then it creates component \nview-tree recursively using FlexLayout's children property.\n\n##### Component::dispatch(action:object)\nTo manipulate Context's states and behaviors, explicitly defined or custom actions \nmust be used so that Context's reducers are triggered.\n\n##### Contx/Smartface/\n\n-  **Action::type = addChild**\nAdds specified component and their children to the PageContext and applies styles \nby class-name selectors.\n\t- *Action::name: string* - Component's name is to use like an unique id. It must be unique only in it's belonging layout.\n\t- *Action::component: object* - Component instance to be added to context.\n\t- *Action::classNames: string* - Class-name of component.\n\t- *Action::userStyle: object* - Initial style of component. (User properties)\n\n- **Action.type => changeUserStyle** : \nOverwrites component userStyle.\n\t- *Action::userStyle:object*\n\t- :warning: This will change component's current user-style (User properties).\n \t-   ```js\n        myButton.dispatch({\n            type: \"changeUserStyle\",\n            userStyle: {\n                backgroundColor: \"#AABBCC\"\n            }\n        });\n        ```\n    -   ```js\n        myButton.dispatch({\n            type: \"changeUserStyle\",\n            userStyle: (style) => {\n                style.backgroundColor = \"#AABBCC\";\n                return style;\n            }\n        });\n        ```\n\n- **Action.type => updateUserStyle** : \nUpdates component userStyle.\n\t- *Action::userStyle:object*\n\t-   ```js\n        myButton.dispatch({\n            type: \"updateUserStyle\",\n            userStyle: {\n                backgroundColor: \"#AABBCC\"\n            }\n        });\n        ```\n\n- **Action.type => removeChild** : \nRemoves target component and it's children from context.\n    - :warning: This won't remove target component from layout.\n\t-   ```js\n        myLayout.dispatch({\n            type: \"removeChild\"\n        });\n        ```\n\n- **Action.type => removeChildren** : \nRemoves target component's children from context.\n    - :warning: This won't remove target component's children from layout.\n\t-   ```js\n        myLayout.dispatch({\n            type: \"removeChildren\"\n        });\n        ```\n\n- **Action.type => pushClassNames** : \nPushes new className selectors to the target component.\n\t- *Action::classNames:string* for one classname\n\t- *Action::classNames:Array* for multiple classnames\n\t- :warning: This action won't work if target component has the class name to \n\tbe added.\n\t-   ```js\n        myButton.dispatch({\n            type: \"pushClassNames\",\n            classNames: [\".foo\", \".bar\"]\n        });\n        ```\n\t-   ```js\n        myButton.dispatch({\n            type: \"pushClassNames\",\n            classNames: \".foo\"\n        });\n        ```\n\n- **Action.type => removeClassName** :\nRemoves className selector from specified component.\n\t- *Action::className:string* for one classname\n\t- *Action::className:Array* for multiple classnames\n\t-   ```js\n        myButton.dispatch({\n            type: \"removeClassName\",\n            className: [\".foo\", \".bar\"]\n        });\n        ```\n\t-   ```js\n        myButton.dispatch({\n            type: \"removeClassName\",\n            className: \".foo\"\n        });\n        ```\n\n- **Action.type => invalidate** : \nForces to update Context's actors and applies styles if they are changed.\n\t-   ```js\n        myButton.dispatch({\n            type: \"invalidate\"\n        });\n        ```\n\n- **Action.type => updateContext** : \nAdds new components to Context or removes ones that doesn't exist in the updated FlexLayout::children.\n\n##### FlexLayout::addChild(childComponent:*, ?contextName: string, ?className: string, ?userStyle:StyleObject=null)\n\nAdds specified component to target layout and if contextName is specified then \ndispatches addPageContextChild action to the Context.\n-   ```js\n    var myButton = new Button();\n    page.layout.addChild(myButton, \"myButton\", \".button\", {\n      width: 250,\n      height: 250\n    });\n    ```\nor\n-   ```js\n    page.layout.addChild(myButton, \"myButton\", \".button\", function(userProps) {\n      userProps.width = 250;\n      userProps.height = 250;\n      return userProps;\n    });\n    ```\n\n#####  FlexLayout::removeChild(childComponent:object)\n\nRemoves specified component from target layout then dispatches removeChild action \nto the Context.\n\n-   ```js\n    // myButton component will be removed from both context and page layout\n    page.layout.removeChild(myButton);\n    ```\n\n##### FlexLayout::removeAll()\n\nRemoves target component's children then dispatches removeChildren action to \nthe Context.\n\n-   ```js\n    // Children of page will be removed from both context and page layout\n    page.layout.removeAll();\n    ```\n\n#### Life-Cycle Events\n\n##### Component::componentDidLeave\n\nWhen a component is removed from the Context and if the component has componentDidLeave \nmethod then it's triggered.\n\n##### Component::componentDidEnter(dispatch:function)\n\nWhen a component initialized in the Context and if the component has componentDidEnter \nmethod and then it's triggered by passing it's dispatch method. If not, dispatch \nmethod will be assigned to component directly.\n\n##### Component::onError(error:Error)\n\nIf an error occcurs while an operation is being performed for a component, for \nexample assignment of new properties, and the component has onError method then \nthe error is passed to onError method of the component. If not and then the \ncontext throws the error.\n\n### Tricks\n\n##### Attributes\n\nSome properties are called [attributes](https://github.com/smartface/contxjs/blob/master/attributes.md).\nContext **does not** handle attribute properties.\n\nIf you want to set an attribute, just set it directly like below:\n\n```js\nbutton.text = \"Text\";\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/smartface/contxjs.git"
  },
  "scripts": {
    "build": "BABEL_ENV=production babel ./src/ --out-dir -d ./lib/.",
    "build:dev": "BABEL_ENV=development babel ./src/ --out-dir -d ../scripts/node_modules/@smartface/contx",
    "dev:link": "npm run dev:remove && BABEL_ENV=development npm run build && npm run dev:sync",
    "dev:remove": "rm -R -f ../scripts/node_modules/@smartface/contx & rm -R -f ./lib",
    "dev:sync": "mkdir -p ../scripts/node_modules/@smartface/contx && cp -r -t ../scripts/node_modules/@smartface/contx lib package.json ",
    "docs": "jsdoc2md -c .jsdoc.json --no-cache --files src/core/Actor.js --namepaths",
    "docs:clean": "rimraf _book",
    "docs:publish": "gh-pages --dist _book",
    "prepublish": "rm -R -f ./lib && npm run build",
    "test": "mocha --compilers js:babel-core/register --debug ./test/**/*.test.js",
    "test:watch": "mocha --watch --compilers js:babel-core/register --debug ./test/**/*.test.js"
  },
  "version": "1.4.0-beta.13"
}
